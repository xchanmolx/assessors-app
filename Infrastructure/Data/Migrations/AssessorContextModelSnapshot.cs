// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AssessorContext))]
    partial class AssessorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Core.Entities.AgriculturalLand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("FirstClass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SecondClass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThirdClass")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("AgriculturalLands");
                });

            modelBuilder.Entity("Core.Entities.Boundary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("East")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("North")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("South")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TaxDecOfRealPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("West")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("TaxDecOfRealPropertyId")
                        .IsUnique();

                    b.ToTable("Boundaries");
                });

            modelBuilder.Entity("Core.Entities.CommercialLand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CommercialLands");
                });

            modelBuilder.Entity("Core.Entities.IndustrialLand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("IndustrialLands");
                });

            modelBuilder.Entity("Core.Entities.KindOfProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActualUse")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<decimal>("AssessedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Level")
                        .HasColumnType("float");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TaxDecOfRealPropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxDecOfRealPropertyId");

                    b.ToTable("KindOfProperties");
                });

            modelBuilder.Entity("Core.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("TaxDecOfRealPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(230)
                        .HasColumnType("nvarchar(230)");

                    b.HasKey("Id");

                    b.HasIndex("TaxDecOfRealPropertyId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Core.Entities.PropertyLand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AgriculturalLandId")
                        .HasColumnType("int");

                    b.Property<int?>("CommercialLandId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustrialLandId")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentialLandId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxDecOfRealPropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgriculturalLandId");

                    b.HasIndex("CommercialLandId");

                    b.HasIndex("IndustrialLandId");

                    b.HasIndex("ResidentialLandId");

                    b.HasIndex("TaxDecOfRealPropertyId");

                    b.ToTable("PropertyLands");
                });

            modelBuilder.Entity("Core.Entities.ResidentialLand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ResidentialLands");
                });

            modelBuilder.Entity("Core.Entities.TaxDecOfRealProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ApprovedMessage")
                        .HasMaxLength(230)
                        .HasColumnType("nvarchar(230)");

                    b.Property<string>("ArpNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AssessorLotNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BlkNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BriefDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dated")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DeclarationCancels")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KindOfPropertyAssessed")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Memoranda")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NoOfStoreys")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("OctNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OctTctCloaNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(230)
                        .HasColumnType("nvarchar(230)");

                    b.Property<string>("OwnerTdNoCancels")
                        .HasMaxLength(230)
                        .HasColumnType("nvarchar(230)");

                    b.Property<decimal>("PreviousAssessedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyIndentificationNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PropertyLocation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Quarter")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("RecommendedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specify")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SurveyLotNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TaxableExempt")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("TdNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TinNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TotalAssessedValueInWord")
                        .IsRequired()
                        .HasMaxLength(230)
                        .HasColumnType("nvarchar(230)");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TaxDecOfRealProperties");
                });

            modelBuilder.Entity("Core.Entities.Boundary", b =>
                {
                    b.HasOne("Core.Entities.TaxDecOfRealProperty", "TaxDecOfRealProperty")
                        .WithOne("Boundary")
                        .HasForeignKey("Core.Entities.Boundary", "TaxDecOfRealPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxDecOfRealProperty");
                });

            modelBuilder.Entity("Core.Entities.KindOfProperty", b =>
                {
                    b.HasOne("Core.Entities.TaxDecOfRealProperty", "TaxDecOfRealProperty")
                        .WithMany("KindOfProperties")
                        .HasForeignKey("TaxDecOfRealPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxDecOfRealProperty");
                });

            modelBuilder.Entity("Core.Entities.Photo", b =>
                {
                    b.HasOne("Core.Entities.TaxDecOfRealProperty", "TaxDecOfRealProperty")
                        .WithMany("Photos")
                        .HasForeignKey("TaxDecOfRealPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxDecOfRealProperty");
                });

            modelBuilder.Entity("Core.Entities.PropertyLand", b =>
                {
                    b.HasOne("Core.Entities.AgriculturalLand", "AgriculturalLand")
                        .WithMany()
                        .HasForeignKey("AgriculturalLandId");

                    b.HasOne("Core.Entities.CommercialLand", "CommercialLand")
                        .WithMany()
                        .HasForeignKey("CommercialLandId");

                    b.HasOne("Core.Entities.IndustrialLand", "IndustrialLand")
                        .WithMany()
                        .HasForeignKey("IndustrialLandId");

                    b.HasOne("Core.Entities.ResidentialLand", "ResidentialLand")
                        .WithMany()
                        .HasForeignKey("ResidentialLandId");

                    b.HasOne("Core.Entities.TaxDecOfRealProperty", "TaxDecOfRealProperty")
                        .WithMany("PropertyLands")
                        .HasForeignKey("TaxDecOfRealPropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AgriculturalLand");

                    b.Navigation("CommercialLand");

                    b.Navigation("IndustrialLand");

                    b.Navigation("ResidentialLand");

                    b.Navigation("TaxDecOfRealProperty");
                });

            modelBuilder.Entity("Core.Entities.TaxDecOfRealProperty", b =>
                {
                    b.Navigation("Boundary");

                    b.Navigation("KindOfProperties");

                    b.Navigation("Photos");

                    b.Navigation("PropertyLands");
                });
#pragma warning restore 612, 618
        }
    }
}
